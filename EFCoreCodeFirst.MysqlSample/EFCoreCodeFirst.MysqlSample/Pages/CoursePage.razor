@page "/course"
@using EFCoreCodeFirst.MysqlSample.Model
@using EFCoreCodeFirst.MysqlSample.Service

@inject IJSRuntime js

<PageTitle>Course</PageTitle>

<h1>Course</h1>

<div class="container-fluid">
    <div class="container-fluid">
        <table class="table">
            <thead>
                <tr>
                    <th>Course Code</th>
                    <th>Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="dataList" Context="item">
                    <tr>
                        <td>@item.CourseCode</td>
                        <td>@item.Name</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-info" @onclick="() => PrepareUpdate(item.Id)">Update Record</button>
                                <button class="btn btn-danger" @onclick="() => Delete(item.Id)">Delete Record</button>
                            </div>
                        </td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>
    <div class="container-fluid">
        <div class="btn-group">
            <button class="btn btn-primary" type="button" @onclick="PrepareCreate"
                    data-bs-target="#inputModal">
                Create New Record
            </button>
        </div>
    </div>

    <!--Modal form-->
    <div id="inputModal" class="modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <EditForm EditContext="@editContext" OnValidSubmit="HandleCreateFormSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">Create New Data</h5>
                        <button type="button" class="btn-close"
                                onclick="modalCommand('inputModal', false)" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="courseCode">Course Code</label>
                            <InputText @bind-Value="itemObject.CourseCode" class="form-control" id="courseCode" placeholder="Enter unique course code here.." />
                            <ValidationMessage For="() => itemObject.CourseCode" />
                        </div>
                        <div class="form-group">
                            <label for="courseName">Course Name</label>
                            <InputText @bind-Value="itemObject.Name" class="form-control" id="courseName" placeholder="Enter course name here.." />
                            <ValidationMessage For="() => itemObject.Name" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                                onclick="modalCommand('inputModal', false)">
                            Close
                        </button>
                        <button type="submit" class="btn btn-primary">
                            @if (itemObject.Id <= 0)
                            {
                                <span>Create</span>
                            }
                            else
                            {
                                <span>Update</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    List<Course> dataList;
    CourseService service;
    EditContext editContext;
    Course itemObject;

    protected override async Task OnInitializedAsync()
    {
        itemObject = new();
        editContext = new EditContext(itemObject);

        if (service is null) { service = new(); }
        dataList = service.ReadAll();
    }

    async Task HandleCreateFormSubmit()
    {
        if (itemObject.Id > 0)
        {
            Update(itemObject);
            return;
        }
        Create(itemObject);
    }

    async void PrepareCreate()
    {
        itemObject = new();
        editContext = new EditContext(itemObject);
        StateHasChanged();
        await js.InvokeVoidAsync("modalCommand", "inputModal", true);
    }

    async void Create(Course data)
    {
        try
        {
            var create = service.Create(data);
            if (create)
            {            
                await js.InvokeVoidAsync("modalCommand", "inputModal", false);
                await js.InvokeVoidAsync("alert", "Create data success");
                dataList = service.ReadAll();
                StateHasChanged();
                return;
            }
            await js.InvokeVoidAsync("alert", "Create data failed");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", "Create data failed");
        }
    }

    async void PrepareUpdate(long id)
    {
        itemObject = service.FindById(id);

        if (itemObject is not null)
        {
            await js.InvokeVoidAsync("modalCommand", "inputModal", true);
            return;
        }
        await js.InvokeVoidAsync("aler", "Cannot find selected data");
    }

    async void Update(Course data)
    {
        try
        {
            var update = service.Update(data);
            if (update)
            {
                await js.InvokeVoidAsync("modalCommand", "inputModal", false);
                await js.InvokeVoidAsync("alert", "Update data success");
                dataList = service.ReadAll();
                StateHasChanged();
                return;
            }
            await js.InvokeVoidAsync("alert", "Update data failed");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", "Update data failed");
        }
    }

    async void Delete(long id)
    {
        try
        {
            var delete = service.Delete(id);
            if (delete)
            {
                await js.InvokeVoidAsync("alert", "Delete data success");
                dataList = service.ReadAll();
                StateHasChanged();
                return;
            }
            await js.InvokeVoidAsync("alert", "Delete data failed");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", "Delete data failed");
        }
    }
}
